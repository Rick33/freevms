%(
	****************************************************************

		Copyright (c) 1992, Carnegie Mellon University

		All Rights Reserved

	Permission  is  hereby  granted   to  use,  copy,  modify,  and
	distribute  this software  provided  that the  above  copyright
	notice appears in  all copies and that  any distribution be for
	noncommercial purposes.

	Carnegie Mellon University disclaims all warranties with regard
	to this software.  In no event shall Carnegie Mellon University
	be liable for  any special, indirect,  or consequential damages
	or any damages whatsoever  resulting from loss of use, data, or
	profits  arising  out of  or in  connection  with  the  use  or
	performance of this software.

	****************************************************************
)%
! Definitions for Address Resolution Protocol
! Written by: Vince Fuller, April 1986
! Copyright (c) 1986, Vince Fuller and Carnegie-Mellon University
!
!	10-Feb-1992	Henry W. Miller		USBR
!	Set MAX_RCV_BUF back down to 8 ; was eating up too much NPAGEDYN
!
!	5-Aug-1991	Henry W. Miller		USBR
!	Set MAX_RCV_BUF to 16.
!
LIBRARY 'CMUIP_SRC:[central]NETXPORT';		! VMS specifics

LITERAL
    AR$OP_REQUEST = 1,		! Request function
    AR$OP_REPLY = 2,		! Reply function

! Definitions of AR$HRD (hardware) fields

    AR$HRD_ETHER = 1,		! 10MB ethernet
    AR$HRD_3MB = 2,		! 3MB ethernet
    AR$HRD_AMRAD = 3,		! Amateur Radio AX.25
    AR$HRD_PRONET = 4,		! proNET
    AR$HRD_CHAOS = 5,		! CHAOSnet

! Definition of AR$PRO (protocol) fields

    AR$PRO_PUP = %X'200',	! PUP
    AR$PRO_IP = %X'800',	! IP
    AR$PRO_IP_3MB = %O'1001',	! IP (3MB Experimental Ethernet)

! Address lengths

    ARP_HDW_LEN = 8,		! Max length of hardware addresses
    ARP_IP_LEN = 4,		! Length of IP addresses
    ARP_MAXADRS = ARP_HDW_LEN*2+ARP_IP_LEN*2;

$FIELD ARP_FIELDS =
    SET
    AR$HRD	= [$BYTES(2)],	! Hardware address space
    AR$PRO	= [$BYTES(2)],	! Protocol address space
    AR$HLN	= [$BYTE],	! Byte length of hardware addresses
    AR$PLN	= [$BYTE],	! Byte length of protocol addresses
    AR$OP	= [$BYTES(2)],	! ARP opcode
    AR$XTRA	= [$BYTES(0)]	! Addresses
    TES;
LITERAL
    ARP_HLEN = $FIELD_SET_SIZE,
    ARP_LEN = ARP_HLEN+ARP_MAXADRS;
MACRO ARP_PKT = BLOCK[ARP_LEN] FIELD(ARP_FIELDS) %;

LITERAL
    ARP_MAX_LEN = ARP_LEN;	! To export to device drivers

! Header portion of an ARP receive buffer

$FIELD XE_ARP_FIELDS =
    SET
    ar_chan = [$bytes(2)],	! vms channel for arp
    ar_ios0 = [$bytes(2)],	! iosb for arp
    ar_ios1 = [$bytes(2)],
    ar_ios2 = [$bytes(2)],
    ar_ios3 = [$bytes(2)],
    phys$1  = [$bytes(6)],	! physical address 1 (destination)
    phys$2  = [$bytes(6)],	! physical address 2 (source)
    $Overlay(phys$2)
	ar_phy_src1 = [$bytes(4)],
	ar_phy_src2 = [$bytes(2)],
    $Continue
    ar_pro  = [$bytes(2)],	! hardware protocol number
    ar_data = [$bytes(0)]	! Offset of ARP data
    TES;

LITERAL
    XE_ARP_HLEN = $FIELD_SET_SIZE,
    XE_ARP_LEN = XE_ARP_HLEN+ARP_MAX_LEN;
MACRO
    XE_ARP_STRUCTURE = BLOCK[XE_ARP_LEN] FIELD(XE_ARP_FIELDS)%;

LITERAL
    MAX_RCV_BUF = 8;

