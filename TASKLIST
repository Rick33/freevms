FreeVMS tasklist

1. High priority:

  Basic/foundation stuff:

    CPU, barely started, need more people:	
	We will need someone with keen eye for and high knowledge of CPU 
	semantics to finish IPLs etc, because we need to get synchronization
	correct on the instruction level, or we will never get it stable.

	Important concepts are atomicity/noninterruption, interlocking, stacks.
	(See VARM, eventually AARM.) 

	Also needed is implementing and finishing the following instructions:

		INSQUE, REMQUE
		ADAWI, INSQHI, INSQTI, REMQHI, REMQTI
		PROBE
		CHMx
		REI
		SWASTEN
		SWPCTX, LDPCTX

	Interrupt/trap/stack functionality needs also implementation.

  Data Structure Definitions, some done, need more people.

  Kernel:	

    Control Mechanisms:
	ASTs, work on this have started, need more people.

    Synchronization:
	Lock management (DLM), barely started, need more people.

    Memory management, no work done yet, vacant.

    Process and time management, some work done, need more people. 

    I/O Subsystem, barely started, need lots of more people.

    Logicals, barely started, need more people.

  ODS-2, work is under way

  DCL, will at first be implemented kernel-independent, need more people.
  Suggested order:
	CLI, LBR
	CDU, MSG
	DCL itself, with Internal Procedures
	CLI Command Language Interface routines No kernel stuff
		See
		$ help cli
		http://www.openvms.compaq.com:8000/73final/4493/
		4493pro_003.html#cli_chap
	LBR librarian   No kernel stuff (I think)
		See 
		$ help lbr
		http://www.openvms.compaq.com:8000/73final/6100/
		6100pro_005.html#lib_chap
		http://www.openvms.compaq.com:8000/73final/4493/
		4493pro_019.html#23_structureoflibraries
	CDU Command Definition Utility  No kernel stuff (I think)
		See
		$ help set command
		http://www.openvms.compaq.com:8000/73final/6100/
		6100pro.html#cd_chap
	MSG message     No kernel stuff (I think)
		See
		$ help rtl lib lib$signal
		$ help message 
		http://www.openvms.compaq.com:8000/73final/6100/
		6100pro_008.html#msg_chap
	Internal procedures possible now, some can be developed independently
		=, assign, call, create/name_table, deassign, define,
		delete/symbol, eod, exit, gosub, goto, if/then/else/endif,
		inquire, on, read, recall, return, set control, set prompt,
		set symbol, set [no]verify, show symbol, show time,
		show translation, stop, write

	Internal procedures for later (kernel dependent)
		allocate, attach, cancel, close, connect, continue, 
		deallocate, debug, deck, define/key, delete/key, deposit,
		disconnect, eoj, examine, open, set default, set key,
		set [no]on, set output_rate, set protection, set uic,
		show default, show key, show protection, show quota,
		show status, spawn, wait

	Also see: 
		Look up DCL in the Internals book. 
		Mainly Process Dynamics chapter.

  Basic libraries:
    LBR, nothing done, vacant.

  Other libraries:
    LIBRTL, parts done, need more people still.

  "SRM", started

2. (a bit later) high priority:
  RMS, nothing done, vacant
  "SRM" handling ODS-2
  Utilities COPY DIRECTORY etc, nothing done, vacant
  VMS image support, linker+compiler support for images, nothing done, vacant.
  Kernel:
    Control Mechanisms:
	Condition handling, no work done yet, vacant.
	System service dispatching, to be done the VMS way, nothing done, vacant.
    Synchronization:
	Spinlocks, the Linux ones are probably usable.
	Mutexes, nothing done, vacant
    SMP support, no support yet, vacant 

3. (later) high priority:
  Clustering, SCA, MSCP etc, barely started, need more people.

Medium priority:

Medium/low priority:
  Non-i386 support.
  64-bit support.

Low priority:
  CRTL, we will continue to try to use libc etc? 
  Editors, nothing done, vacant
  Volume shadowing, nothing done, vacant
